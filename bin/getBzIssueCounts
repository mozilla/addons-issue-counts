#!/usr/bin/env node

// Magically require any env variables defined in a local .env file.
require('dotenv').config();

const fetch = require('node-fetch');
const queryString = require('query-string');
const Influx = require('influx');

// Bail early if env vars are missing.
let influxEnvVarErrorFlag = false;
for (const key of ['HOST', 'PORT', 'DATABASE', 'USER', 'PASSWORD']) {
  if (!process.env[`INFLUX_DB_${key}`]) {
    console.error(`No env var for INFLUX_DB_${key} provided`);
    influxEnvVarErrorFlag = true;
  }
}
if (influxEnvVarErrorFlag) {
  process.exit(1);
}

const whiteboardTags = [
  '[mv3-m1]',
  '[mv3-m2]',
  '[mv3-m3]',
  '[mv3-m4]',
  '[mv3-m5]',
  '[mv3-future]',
  'stockwell',
  'addons-ux',
  'prod_bug',
];

const whiteboardTagParams = {
  status_whiteboard_type: 'allwordssubstr',
  status_whiteboard: null, // Placeholder for the whiteboard tag to look for.
};

const webExtOnlyParams = {
  component: [
    'Add-ons Manager',
    'Android',
    'Compatibility',
    'Developer Outreach',
    'Developer Tools',
    'Experiments',
    'Frontend',
    'General',
    'Request Handling',
    'Storage',
    'Themes',
    'Untriaged',
  ],
  product: ['Toolkit', 'WebExtensions'],
};

const openBugParams = {
  resolution: '---',
  bug_status: ['ASSIGNED', 'NEW', 'REOPENED', 'UNCONFIRMED'],
};

const baseAPIURL = 'https://bugzilla.mozilla.org/rest/bug';
const priorities = ['--', 'P1', 'P2', 'P3', 'P4', 'P5'];
const severities = ['normal', '--', 'N/A', 'S1', 'S2', 'S3', 'S4'];
const products = [
  'Toolkit',
  'WebExtensions',
];

async function fetchIssueCount({priority, product, bug_severity} = {}) {
  const params = {
    product,
    priority,
    bug_severity,
    count_only: true,
    limit: 0,
  };

  /* istanbul ignore next */
  if (params.bug_priority && params.bug_severity) {
    throw new Error('Query only severity or priority independently');
  }

  if (bug_severity) {
    delete params.priority;
  }

  if (priority) {
    delete params.bug_severity;
  }

  if (product === 'Toolkit') {
    params.component = 'Add-ons Manager';
  }

  const apiURL = `${baseAPIURL}?${queryString.stringify({
    ...params,
    ...openBugParams,
  })}`;

  // console.log(JSON.stringify(params, null, 2));
  const result = await fetch(apiURL, {
    headers: { 'Content-Type': 'application/json' },
  });
  const json = await result.json();
  return json.bug_count;
}

async function fetchWhiteboardTag(whiteboardTag) {
  const apiParams = {
    ...whiteboardTagParams,
    ...webExtOnlyParams,
    ...openBugParams,
    status_whiteboard: whiteboardTag,
    count_only: true,
  };

  const apiURL = `${baseAPIURL}?${queryString.stringify(apiParams)}`;
  const result = await fetch(apiURL, {
    headers: { 'Content-Type': 'application/json' },
  });
  const json = await result.json();
  return json.bug_count;
}


const influx = new Influx.InfluxDB({
  host: process.env.INFLUX_DB_HOST,
  protocol: 'https',
  port: parseInt(process.env.INFLUX_DB_PORT, 10),
  database: process.env.INFLUX_DB_DATABASE,
  username: process.env.INFLUX_DB_USER,
  password: process.env.INFLUX_DB_PASSWORD,
  schema: [
    {
      measurement: 'addons-bz-issue-counts',
      fields: {
        'priority-default': Influx.FieldType.INTEGER,
        'priority-p1': Influx.FieldType.INTEGER,
        'priority-p2': Influx.FieldType.INTEGER,
        'priority-p3': Influx.FieldType.INTEGER,
        'priority-p4': Influx.FieldType.INTEGER,
        'priority-p5': Influx.FieldType.INTEGER,
        'severity-normal': Influx.FieldType.INTEGER,
        'severity-default': Influx.FieldType.INTEGER,
        'severity-not-applicable': Influx.FieldType.INTEGER,
        'severity-s1': Influx.FieldType.INTEGER,
        'severity-s2': Influx.FieldType.INTEGER,
        'severity-s3': Influx.FieldType.INTEGER,
        'severity-s4': Influx.FieldType.INTEGER,
        'whiteboard-mv3-m1': Influx.FieldType.INTEGER,
        'whiteboard-mv3-m2': Influx.FieldType.INTEGER,
        'whiteboard-mv3-m3': Influx.FieldType.INTEGER,
        'whiteboard-mv3-m4': Influx.FieldType.INTEGER,
        'whiteboard-mv3-m5': Influx.FieldType.INTEGER,
        'whiteboard-mv3-future': Influx.FieldType.INTEGER,
        'whiteboard-stockwell': Influx.FieldType.INTEGER,
        'whiteboard-addons-ux': Influx.FieldType.INTEGER,
        'whiteboard-prod_bug': Influx.FieldType.INTEGER,
      },
      tags: [
        'product'
      ]
    }
  ]
});


const requests = [];
const combinedData = { combined: {} };

for (const product of products) {
  combinedData[product] = {};
  for (const priority of priorities) {
    requests.push(fetchIssueCount({
        product,
        priority
      }).then((result) => {
        switch(priority) {
          case '--':
            priorityLabel = 'default';
            break;
          default:
            priorityLabel = priority.toLowerCase();
        }
        combinedData[product][`priority-${priorityLabel}`] = result;
      })
    );
  }

  for (const severity of severities) {
    requests.push(fetchIssueCount({
        product,
        bug_severity: severity,
      }).then((result) => {
        let severityLabel = severity;
        switch(severity) {
          case 'N/A':
            severityLabel = 'not-applicable';
            break;
          case '--':
            severityLabel = 'default';
            break;
          default:
            severityLabel = severity.toLowerCase();
        }
        combinedData[product][`severity-${severityLabel}`] = result;
      })
    );
  }
}

for (const tag of whiteboardTags) {
  requests.push(fetchWhiteboardTag(tag)
    .then((result) => {
      combinedData.combined[`whiteboard-${tag.replace('[', '').replace(']', '')}`] = result;
    })
  );
}

Promise.all(requests)
  .then(() => {
    // console.log(JSON.stringify(combinedData, null, 2));
    const metricList = [];
    Object.keys(combinedData).forEach((product, idx) => {
      metricList.push({
        measurement: 'addons-bz-issue-counts',
        fields: { ...combinedData[product] },
        tags: { product: product.toLowerCase() },
      })
    });
    // console.log(JSON.stringify(metricList, null, 2));
    return influx.writePoints(metricList);
  });
